package edu.illinois.cs.cogcomp.lbjava;


// FIXME: This is a dummy classifier, duplicate of RelationClassifier
//   until we can identify the actual lbj file that should go here

import java.util.*;
import edu.illinois.cs.cogcomp.cikm09.learning.Instance;
import edu.illinois.cs.cogcomp.cikm09.learning.Constants;


// real% Features(Instance ins) <-
// {
// 	sense  ins.scoreCosine_Anc;
// 	sense  ins.scorePmi_Anc;
// 	sense ins.scoreCosineCat_Cou;
// 	sense  ins.scoreCosineAbs_Cou;
// 	sense ins.ratioCat_Anc;
// 	sense  ins.ratioCat_Cou;
// }

real dLxCy(Instance ins) <- { return ins.ratio_TtlCat;}
real dCxLy(Instance ins) <- { return ins.ratio_CatTtl;}
real dCxCy(Instance ins) <- { return ins.ratio_CatCat;}
real pmi(Instance ins) <- { return ins.scorePmi_E1E2;}
real sTxTy(Instance ins) <- { return ins.scoreCos_AbsAbs;}
real sCxCy(Instance ins) <- { return ins.scoreCos_CatCat;}
real sTxCy(Instance ins) <- { return ins.scoreCos_AbsCat;}
real sCxTy(Instance ins) <- { return ins.scoreCos_CatAbs;}

discrete Label(Instance ins) <-
{
  return ins.relation;
}

discrete AFRelationClassifier(Instance ins) <-
learn Label
	using dLxCy, dCxLy, dCxCy, pmi, sTxTy, sCxCy, sTxCy, sCxTy
	with new SparseNetworkLearner(new SparseAveragedPerceptron(Constants.learningRate, Constants.learningThreshold, Constants.learningThickness))
end